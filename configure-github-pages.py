#!/usr/bin/env python3
"""
Script para configurar automaticamente o projeto para GitHub Pages
Substitui os placeholders [SEU-USUARIO] e [NOME-DO-REPOSITORIO] pelos valores corretos.
"""

import os
import re
import sys

def configure_github_pages():
    """Configura o projeto para GitHub Pages substituindo placeholders."""
    
    print("üöÄ Configurador do GitHub Pages - Projeto Economia Sustent√°vel")
    print("=" * 60)
    
    # Solicita informa√ß√µes do usu√°rio
    username = input("Digite seu nome de usu√°rio do GitHub: ").strip()
    if not username:
        print("‚ùå Nome de usu√°rio √© obrigat√≥rio!")
        return False
    
    repo_name = input("Digite o nome do reposit√≥rio: ").strip()
    if not repo_name:
        print("‚ùå Nome do reposit√≥rio √© obrigat√≥rio!")
        return False
    
    print(f"\nüìù Configurando para:")
    print(f"   Usu√°rio: {username}")
    print(f"   Reposit√≥rio: {repo_name}")
    print(f"   URL final: https://{username}.github.io/{repo_name}")
    
    confirma = input("\n‚úÖ Confirma essas informa√ß√µes? (s/N): ").strip().lower()
    if confirma not in ['s', 'sim', 'y', 'yes']:
        print("‚ùå Opera√ß√£o cancelada.")
        return False
    
    # Arquivos para processar
    files_to_process = ['index.html']
    
    for filename in files_to_process:
        if not os.path.exists(filename):
            print(f"‚ö†Ô∏è  Arquivo {filename} n√£o encontrado, pulando...")
            continue
        
        print(f"üîÑ Processando {filename}...")
        
        try:
            # L√™ o arquivo
            with open(filename, 'r', encoding='utf-8') as file:
                content = file.read()
            
            # Faz as substitui√ß√µes
            content = content.replace('[SEU-USUARIO]', username)
            content = content.replace('[NOME-DO-REPOSITORIO]', repo_name)
            
            # Salva o arquivo
            with open(filename, 'w', encoding='utf-8') as file:
                file.write(content)
            
            print(f"‚úÖ {filename} configurado com sucesso!")
            
        except Exception as e:
            print(f"‚ùå Erro ao processar {filename}: {e}")
            return False
    
    print("\nüéâ Configura√ß√£o conclu√≠da!")
    print("\nüìã Pr√≥ximos passos:")
    print("1. Crie um reposit√≥rio no GitHub com o nome:", repo_name)
    print("2. Fa√ßa upload de todos os arquivos")
    print("3. Ative o GitHub Pages nas configura√ß√µes")
    print("4. Acesse:", f"https://{username}.github.io/{repo_name}")
    print("\nüìñ Para instru√ß√µes detalhadas, veja DEPLOY.md")
    
    return True

def main():
    """Fun√ß√£o principal."""
    try:
        configure_github_pages()
    except KeyboardInterrupt:
        print("\n\n‚ùå Opera√ß√£o interrompida pelo usu√°rio.")
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    sys.exit(main())
